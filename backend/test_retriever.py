# test_retriever.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
import os
import logging
from retriever import EnhancedFlashrankRerankRetriever, PostgresVectorRetriever
from sentence_transformers import SentenceTransformer
from psycopg2 import pool

# --- Configuration ---
DB_URL = os.getenv("DATABASE_URL")
EMBED_MODEL_NAME = os.getenv("EMBED_MODEL", "BAAI/bge-m3")

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def main():
    print("--- Initializing Connections & Models ---")
    db_pool = None
    try:
        db_pool = pool.SimpleConnectionPool(1, 1, dsn=DB_URL)
        embedder = SentenceTransformer(EMBED_MODEL_NAME, cache_folder='/app/models')
        
        base_retriever = PostgresVectorRetriever(
            connection_pool=db_pool,
            embedder=embedder,
            collection="plcnext",
            limit=50
        )

        reranker_retriever = EnhancedFlashrankRerankRetriever(
            base_retriever=base_retriever,
            top_n=5 # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
        )
        print("‚úÖ Retriever initialized.")
        print("-" * 20)

        test_query = "what is PLCnext?"
        print(f"Testing with query: '{test_query}'")

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà await)
        results = reranker_retriever.get_relevant_documents(test_query)

        print("-" * 20)
        print(f"Found {len(results)} relevant document(s) after reranking.")
        print("--- TOP 5 RESULTS ---")

        if not results:
            print("üö® No documents found.")
        else:
            for i, doc in enumerate(results):
                print(f"\n--- Document {i+1} ---")
                print(f"Content: {doc.page_content[:400]}...")
                print(f"Metadata: {doc.metadata}")
                print("-" * 20)

    except Exception as e:
        logging.error(f"üî• An error occurred in test_retriever: {e}", exc_info=True)
    finally:
        if db_pool:
            db_pool.closeall()
            print("üëã Database connection pool closed.")

if __name__ == "__main__":
    main()